name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format clang-tidy cmake ninja-build lcov

      - name: Configure
        run: cmake --preset=dev

      - name: Build
        run: cmake --build --preset=dev

      - name: Test
        run: ctest --preset=dev

      - name: Generate Coverage
        run: |
          cmake --build --preset=dev --target coverage
          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          genhtml coverage.info --output-directory coverage

      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

      - name: Format Check
        run: |
          find src -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

      - name: Static Analysis
        run: |
          find src -name "*.cpp" -o -name "*.h" | xargs clang-tidy -- -Iinclude

      - name: Performance Check
        run: |
          ./bin/performance_tests --max-frame-time 1ms

      - name: Notify Agent
        if: failure()
        run: |
          echo "Check failed for ${{ github.head_ref }}"
          echo "Agent: ${{ github.head_ref }}"
          echo "Please review the logs and fix the issues."

  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check clang-format
      run: |
        find src include -name '*.cpp' -o -name '*.h' | xargs clang-format --dry-run --Werror

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run clang-tidy
      run: |
        find src include -name '*.cpp' | xargs clang-tidy -p build

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check Documentation
      run: |
        # Check for missing documentation
        find src include -name '*.h' | xargs grep -L "@brief" || true
        # Check changelog format
        grep -q "## \[Unreleased\]" CHANGELOG.md

  agent-specific:
    needs: [build-and-test, format, lint, docs]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check Agent Branch
      run: |
        if [[ "$GITHUB_HEAD_REF" == *"agent1"* ]]; then
          echo "Core Systems Agent - Running performance checks"
          # Add performance profiling steps
        elif [[ "$GITHUB_HEAD_REF" == *"agent2"* ]]; then
          echo "Auxiliary Systems Agent - Running compatibility checks"
          # Add cross-platform compatibility checks
        elif [[ "$GITHUB_HEAD_REF" == *"agent3"* ]]; then
          echo "Testing & Documentation Agent - Running documentation checks"
          # Add documentation completeness checks
        fi

    - name: Check Test Coverage
      if: contains(github.head_ref, 'agent3')
      run: |
        # Run coverage analysis
        cd build
        ctest -T coverage
        # Check coverage threshold
        python3 ../scripts/check_coverage.py 80

    - name: Check Documentation Updates
      if: contains(github.head_ref, 'agent3')
      run: |
        # Check if documentation was updated
        git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "docs/"

    - name: Check Performance Impact
      if: contains(github.head_ref, 'agent1')
      run: |
        # Run performance benchmarks
        cd build
        ./bin/benchmarks
        # Compare with baseline
        python3 ../scripts/compare_performance.py

    - name: Check Cross-Platform Compatibility
      if: contains(github.head_ref, 'agent2')
      run: |
        # Run platform-specific checks
        python3 scripts/check_platform_compatibility.py 